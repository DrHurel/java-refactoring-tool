name: Code Quality & Security

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run security scan every day at midnight
    - cron: '0 0 * * *'

jobs:
  quality-gates:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: 17
        distribution: 'temurin'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Run Checkstyle
      run: mvn checkstyle:check
      continue-on-error: true
      
    - name: Run PMD
      run: mvn pmd:check
      continue-on-error: true
      
    - name: Run SpotBugs
      run: mvn spotbugs:check
      continue-on-error: true
      
    - name: Generate test coverage
      run: mvn clean test jacoco:report
      
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./target/site/jacoco/jacoco.xml
        flags: unittests
        name: codecov-umbrella
        
    - name: Quality Gate - Coverage Check
      run: |
        COVERAGE=$(grep -o 'covered="[^"]*"' target/site/jacoco/jacoco.xml | head -1 | grep -o '[0-9]\+')
        TOTAL=$(grep -o 'missed="[^"]*"' target/site/jacoco/jacoco.xml | head -1 | grep -o '[0-9]\+')
        if [ ! -z "$COVERAGE" ] && [ ! -z "$TOTAL" ]; then
          PERCENTAGE=$((COVERAGE * 100 / (COVERAGE + TOTAL)))
          echo "Code coverage: $PERCENTAGE%"
          if [ $PERCENTAGE -lt 70 ]; then
            echo "❌ Code coverage is below 70%"
            exit 1
          else
            echo "✅ Code coverage is acceptable ($PERCENTAGE%)"
          fi
        else
          echo "⚠️ Could not determine code coverage"
        fi
        
  security-analysis:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: 17
        distribution: 'temurin'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: OWASP Dependency Check
      run: mvn org.owasp:dependency-check-maven:check
      continue-on-error: true
      
    - name: Upload OWASP report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: owasp-report
        path: target/dependency-check-report.html
        
    - name: Run Snyk security scan
      uses: snyk/actions/maven@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high
      continue-on-error: true
      
    - name: Upload Snyk results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: snyk.sarif
        
  performance-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: 17
        distribution: 'temurin'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Build application
      run: mvn clean package -DskipTests
      
    - name: Performance Test - Call Graph Generation
      run: |
        echo "Testing call graph generation performance..."
        time java -cp target/java-refactoring-tool-1.0-SNAPSHOT.jar fr.jeremyhurel.test.TestDotExport
        
    - name: Performance Test - Class Diagram Generation
      run: |
        echo "Testing class diagram generation performance..."
        time java -cp target/java-refactoring-tool-1.0-SNAPSHOT.jar fr.jeremyhurel.test.TestClassDiagramExport
        
    - name: Performance Test - Statistics Generation
      run: |
        echo "Testing statistics generation performance..."
        time java -cp target/java-refactoring-tool-1.0-SNAPSHOT.jar fr.jeremyhurel.test.TestStatisticsExport
        
    - name: Memory Usage Test
      run: |
        echo "Testing memory usage..."
        java -Xmx256m -cp target/java-refactoring-tool-1.0-SNAPSHOT.jar fr.jeremyhurel.test.TestStatisticsExport || echo "High memory usage detected"